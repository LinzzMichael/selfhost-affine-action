name: Build Images

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        type: string
      target-repo:
        description: '目标仓库（格式：owner/repo）'
        required: false
        default: 'LinzzMichael/AFFiNE-SelfHost'  # 默认仓库

permissions:
  contents: 'write'
  id-token: 'write'
  packages: 'write'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.extract.outputs.VERSION }}
      GIT_SHORT_HASH: ${{ steps.extract.outputs.GIT_SHORT_HASH }}
      BUILD_TYPE: ${{ steps.extract.outputs.BUILD_TYPE }}
    steps:
      - uses: actions/checkout@v4
        id: checkout
        with:
          repository: ${{ inputs.target-repo }}
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Extract version and build type
        id: extract
        run: |
          # 获取当前分支名
          BRANCH_NAME=${{ github.ref_name }}

          # 匹配版本号和构建类型
          if [[ "$BRANCH_NAME" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)_(beta|alpha|rc) ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "BUILD_TYPE=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "BUILD_TYPE=stable" >> $GITHUB_OUTPUT
          else
            echo "VERSION=0.0.0" >> $GITHUB_OUTPUT
            echo "BUILD_TYPE=dev" >> $GITHUB_OUTPUT
          fi

          # 获取Git短哈希
          echo "GIT_SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  build-web:
    name: Build @affine/web
    runs-on: ubuntu-latest
    needs:
      - prepare
    environment: ${{ needs.prepare.output.BUILD_TYPE }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target-repo }}
          ref: ${{ inputs.branch }}
      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Build Core
        run: yarn affine @affine/web build
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          BUILD_TYPE: ${{ needs.prepare.output.BUILD_TYPE }}
          CAPTCHA_SITE_KEY: ${{ secrets.CAPTCHA_SITE_KEY }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: 'affine-web'
          SENTRY_RELEASE: ${{ needs.prepare.output.APP_VERSION }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PERFSEE_TOKEN: ${{ secrets.PERFSEE_TOKEN }}
          MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: ./packages/frontend/apps/web/dist
          if-no-files-found: error

  build-admin:
    name: Build @affine/admin
    runs-on: ubuntu-latest
    needs:
      - prepare
    environment: ${{ needs.prepare.output.BUILD_TYPE }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: ${{ inputs.target-repo }}
      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Build Admin
        run: yarn affine @affine/admin build
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          BUILD_TYPE: ${{ needs.prepare.output.BUILD_TYPE }}
          CAPTCHA_SITE_KEY: ${{ secrets.CAPTCHA_SITE_KEY }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: 'affine-admin'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PERFSEE_TOKEN: ${{ secrets.PERFSEE_TOKEN }}
          MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      - name: Upload admin artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin
          path: ./packages/frontend/admin/dist
          if-no-files-found: error

  build-mobile:
    name: Build @affine/mobile
    runs-on: ubuntu-latest
    needs:
      - prepare
    environment: ${{ needs.prepare.output.BUILD_TYPE }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: ${{ inputs.target-repo }}
      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Build Mobile
        run: yarn affine @affine/mobile build
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          BUILD_TYPE: ${{ needs.prepare.output.BUILD_TYPE }}
          CAPTCHA_SITE_KEY: ${{ secrets.CAPTCHA_SITE_KEY }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: 'affine-mobile'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PERFSEE_TOKEN: ${{ secrets.PERFSEE_TOKEN }}
          MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      - name: Upload mobile artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile
          path: ./packages/frontend/apps/mobile/dist
          if-no-files-found: error

  build-server-native:
    name: Build Server native - ${{ matrix.targets.name }}
    runs-on: ubuntu-latest
    needs:
      - prepare
    environment: ${{ needs.prepare.output.BUILD_TYPE }}
    strategy:
      fail-fast: false
      matrix:
        targets:
          - name: x86_64-unknown-linux-gnu
            file: server-native.x64.node
          - name: aarch64-unknown-linux-gnu
            file: server-native.arm64.node
          - name: armv7-unknown-linux-gnueabihf
            file: server-native.armv7.node

    steps:
      - uses: actions/checkout@v4
      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          electron-install: false
          extra-flags: workspaces focus @affine/server-native
      - name: Build Rust
        uses: ./.github/actions/build-rust
        env:
          AFFINE_PRO_PUBLIC_KEY: ${{ secrets.AFFINE_PRO_PUBLIC_KEY }}
          AFFINE_PRO_LICENSE_AES_KEY: ${{ secrets.AFFINE_PRO_LICENSE_AES_KEY }}
        with:
          target: ${{ matrix.targets.name }}
          package: '@affine/server-native'
      - name: Rename ${{ matrix.targets.file }}
        run: |
          mv ./packages/backend/native/server-native.node ./packages/backend/native/${{ matrix.targets.file }}
      - name: Upload ${{ matrix.targets.file }}
        uses: actions/upload-artifact@v4
        with:
          name: server-native-${{ matrix.targets.file }}
          path: ./packages/backend/native/${{ matrix.targets.file }}
          if-no-files-found: error

  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    needs:
      - build-server-native
      - prepare
    steps:
      - uses: actions/checkout@v4
      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          electron-install: false
          extra-flags: workspaces focus @affine/server @types/affine__env
      - name: Download server-native
        uses: actions/download-artifact@v4
        with:
          pattern: server-native-*
          merge-multiple: true
          path: ./packages/backend/native
      - name: List server-native files
        run: ls -alh ./packages/backend/native
      - name: Build @affine/reader
        run: yarn workspace @affine/reader build
      - name: Build Server
        run: yarn workspace @affine/server build
      - name: Upload server dist
        uses: actions/upload-artifact@v4
        with:
          name: server-dist
          path: ./packages/backend/server/dist
          if-no-files-found: error

  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-server
      - build-web
      - build-mobile
      - build-admin
    steps:
      - uses: actions/checkout@v4
      - name: Download server dist
        uses: actions/download-artifact@v4
        with:
          name: server-dist
          path: ./packages/backend/server/dist
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          logout: false
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # setup node without cache configuration
      # Prisma cache is not compatible with docker build cache
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: https://npm.pkg.github.com
          scope: '@toeverything'

      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: web
          path: ./packages/frontend/apps/web/dist

      - name: Download mobile artifact
        uses: actions/download-artifact@v4
        with:
          name: mobile
          path: ./packages/frontend/apps/mobile/dist

      - name: Download admin artifact
        uses: actions/download-artifact@v4
        with:
          name: admin
          path: ./packages/frontend/admin/dist

      - name: Install Node.js dependencies
        run: |
          yarn config set --json supportedArchitectures.cpu '["x64", "arm64", "arm"]'
          yarn config set --json supportedArchitectures.libc '["glibc"]'
          yarn workspaces focus @affine/server --production

      - name: Generate Prisma client
        run: yarn workspace @affine/server prisma generate

      - name: Mv node_modules
        run: mv ./node_modules ./packages/backend/server

      - name: Setup Version
        uses: ./.github/actions/setup-version
        with:
          app-version: ${{ needs.prepare.output.APP_VERSION }}

      - name: Build front Dockerfile
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          pull: true
          platforms: linux/amd64,linux/arm64
          provenance: true
          file: .github/deployment/front/Dockerfile
          tags: ghcr.io/linzzmichael/affine-front:${{needs.prepare.output.BUILD_TYPE}}-${{ needs.prepare.output.GIT_SHORT_HASH }}

      - name: Build graphql Dockerfile
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          pull: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          provenance: true
          file: .github/deployment/node/Dockerfile
          tags: ghcr.io/linzzmichael/affine:${{needs.prepare.output.BUILD_TYPE}}-${{ needs.prepare.output.GIT_SHORT_HASH }}
